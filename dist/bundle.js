(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,":root {\n    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n    line-height: 1.5;\n    font-weight: 400;\n  \n    color-scheme: light dark;\n    color: rgba(255, 255, 255, 0.87);\n    background-color: #242424;\n  \n    font-synthesis: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-text-size-adjust: 100%;\n}\n  \nbody {\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    place-items: center;\n    min-width: 320px;\n    min-height: 100vh;\n    background-color: rgba(0, 191, 255, 0.118);\n}\n\n.boards {\n    display: grid;\n    grid-template-columns: repeat(2, 450px);\n    grid-template-rows: 80px 450px;\n    column-gap: 10rem;\n    margin-top: 4rem;\n    margin-bottom: 2rem;\n}\n  \n.cell {\n    width: 40px;\n    height: 40px;\n\n    border: solid 1px rgba(240, 248, 255, 0.721);\n}\n\n.ship {\n    background-color: aliceblue;\n    border: solid 1px rgba(240, 248, 255, 0.721);\n}\n\n.hit {\n    background-color: rgba(255, 0, 0, 0.645);\n    border-radius: 50%;\n}\n\n.miss {\n    background-color: rgba(2, 127, 177, 0.822);\n    border-radius: 50%;\n}\n\n.disabled {\n    pointer-events: none;  \n}\n\n.game-container {\n    display: grid;\n    grid-template-columns: 2fr;\n    column-gap: 7rem;\n    row-gap: 1px;\n    min-width: 320px;\n    margin-bottom: 3rem;\n}\n\n#gameboard1-container, #gameboard2-container {\n    display: grid;\n    column-gap: 1px;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    background-color: rgba(2, 127, 177, 0.822);\n}\n\n#message-container {\n    margin-top: 5rem;\n    padding: 1rem;\n}\n\nh1, h2 {\n    text-align: center;\n}\n  ","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,mEAAmE;IACnE,gBAAgB;IAChB,gBAAgB;;IAEhB,wBAAwB;IACxB,gCAAgC;IAChC,yBAAyB;;IAEzB,oBAAoB;IACpB,kCAAkC;IAClC,mCAAmC;IACnC,kCAAkC;IAClC,8BAA8B;AAClC;;AAEA;IACI,SAAS;IACT,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;IACjB,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,uCAAuC;IACvC,8BAA8B;IAC9B,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;;IAEZ,4CAA4C;AAChD;;AAEA;IACI,2BAA2B;IAC3B,4CAA4C;AAChD;;AAEA;IACI,wCAAwC;IACxC,kBAAkB;AACtB;;AAEA;IACI,0CAA0C;IAC1C,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,0BAA0B;IAC1B,gBAAgB;IAChB,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,sCAAsC;IACtC,mCAAmC;IACnC,0CAA0C;AAC9C;;AAEA;IACI,gBAAgB;IAChB,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:[":root {\n    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n    line-height: 1.5;\n    font-weight: 400;\n  \n    color-scheme: light dark;\n    color: rgba(255, 255, 255, 0.87);\n    background-color: #242424;\n  \n    font-synthesis: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-text-size-adjust: 100%;\n}\n  \nbody {\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    place-items: center;\n    min-width: 320px;\n    min-height: 100vh;\n    background-color: rgba(0, 191, 255, 0.118);\n}\n\n.boards {\n    display: grid;\n    grid-template-columns: repeat(2, 450px);\n    grid-template-rows: 80px 450px;\n    column-gap: 10rem;\n    margin-top: 4rem;\n    margin-bottom: 2rem;\n}\n  \n.cell {\n    width: 40px;\n    height: 40px;\n\n    border: solid 1px rgba(240, 248, 255, 0.721);\n}\n\n.ship {\n    background-color: aliceblue;\n    border: solid 1px rgba(240, 248, 255, 0.721);\n}\n\n.hit {\n    background-color: rgba(255, 0, 0, 0.645);\n    border-radius: 50%;\n}\n\n.miss {\n    background-color: rgba(2, 127, 177, 0.822);\n    border-radius: 50%;\n}\n\n.disabled {\n    pointer-events: none;  \n}\n\n.game-container {\n    display: grid;\n    grid-template-columns: 2fr;\n    column-gap: 7rem;\n    row-gap: 1px;\n    min-width: 320px;\n    margin-bottom: 3rem;\n}\n\n#gameboard1-container, #gameboard2-container {\n    display: grid;\n    column-gap: 1px;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    background-color: rgba(2, 127, 177, 0.822);\n}\n\n#message-container {\n    margin-top: 5rem;\n    padding: 1rem;\n}\n\nh1, h2 {\n    text-align: center;\n}\n  "],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var u=[].concat(n[s]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var l=n[c],s=r.base?l[0]+r.base:l[0],u=a[s]||0,d="".concat(s," ").concat(u);a[s]=u+1;var A=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var l=r(n,o),s=0;s<a.length;s++){var u=t(a[s]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),l=t.n(c),s=t(216),u=t.n(s),d=t(589),A=t.n(d),p=t(426),m={};function f(n,e){var t="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!t){if(Array.isArray(n)||(t=g(n))||e&&n&&"number"==typeof n.length){t&&(n=t);var r=0,o=function(){};return{s:o,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){t=t.call(n)},n:function(){var n=t.next();return i=n.done,n},e:function(n){c=!0,a=n},f:function(){try{i||null==t.return||t.return()}finally{if(c)throw a}}}}function g(n,e){if(n){if("string"==typeof n)return h(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?h(n,e):void 0}}function h(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}m.styleTagTransform=A(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=u(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var b=function(){var n=Array(10).fill(null).map((function(){return Array(10).fill(null)})),e=[],t=[];return{board:n,placeShip:function(t,r){if(!function(e){var t,r=f(e);try{for(r.s();!(t=r.n()).done;){var o=t.value,a=o.row,i=o.col;if(a<0||a>=10||i<0||i>=10||null!==n[a][i])return!1}}catch(n){r.e(n)}finally{r.f()}return!0}(r))return!1;var o,a=f(r);try{for(a.s();!(o=a.n()).done;){var i=o.value,c=i.row,l=i.col;n[c][l]=t}}catch(n){a.e(n)}finally{a.f()}return e.push(t),!0},receiveAttack:function(e){var r,o,a=(o=2,function(n){if(Array.isArray(n))return n}(r=e)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,a,i,c=[],l=!0,s=!1;try{if(a=(t=t.call(n)).next,0===e){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=a.call(t)).done)&&(c.push(r.value),c.length!==e);l=!0);}catch(n){s=!0,o=n}finally{try{if(!l&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(s)throw o}}return c}}(r,o)||g(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],c=a[1];if(null===n[i][c])return t.push(e),!1;var l=n[i][c];return l.Hit(),l.isSunk()&&(l.sunk=!0),n[i][c]=null,!0},allShipsSunk:function(){return e.every((function(n){return n.sunk}))},missedAttacks:t}};function v(n){return n<=0?"Invalid Ship":{length:n,hit:0,sunk:!1,Hit:function(){return this.hit+=1,this.hit},isSunk:function(){return this.hit>=this.length}}}function C(n,e,t){for(var r=0;r<n.board.length;r++)for(var o=0;o<n.board[r].length;o++){var a=y(r,o,n.board[r][o],t);e.appendChild(a)}}function y(n,e,t,r){var o=document.createElement("div");return o.setAttribute("data-row",n),o.setAttribute("data-col",e),null===t||r?o.classList.add("cell"):o.classList.add("ship"),o}var I,w,B,x,k,S,E,T,j,L,M,O,H,z,N,Z=(w=b(),B=b(),I=B,x={takeTurn:function(n){return{attack:n,result:I.receiveAttack(n)}}},k=function(n){var e=new Set;function t(){for(var n=[],t=0;t<10;t++)for(var r=0;r<10;r++){var o=[t,r];e.has(JSON.stringify(o))||n.push(o)}return 0===n.length?null:n[Math.floor(Math.random()*n.length)]}return{takeTurn:function(){var r,o;do{o=null===(r=t())?"All coordinates attacked":n.receiveAttack(r)}while("Already attacked"===o);return null!==r&&e.add(JSON.stringify(r)),{attack:r,result:o}}}}(w),S=v(5),E=v(4),T=v(3),j=v(3),L=v(2),M=v(5),O=v(4),H=v(3),z=v(3),N=v(2),{startGame:function(){w.placeShip(S,[{row:0,col:0},{row:0,col:1},{row:0,col:2},{row:0,col:3},{row:0,col:4}]),w.placeShip(E,[{row:5,col:5},{row:6,col:5},{row:7,col:5},{row:8,col:5}]),w.placeShip(T,[{row:2,col:0},{row:2,col:1},{row:2,col:2}]),w.placeShip(j,[{row:5,col:9},{row:6,col:9},{row:7,col:9}]),w.placeShip(L,[{row:4,col:0},{row:4,col:1}]),B.placeShip(M,[{row:0,col:0},{row:0,col:1},{row:0,col:2},{row:0,col:3},{row:0,col:4}]),B.placeShip(O,[{row:5,col:5},{row:6,col:5},{row:7,col:5},{row:8,col:5}]),B.placeShip(H,[{row:5,col:9},{row:6,col:9},{row:7,col:9}]),B.placeShip(z,[{row:2,col:0},{row:2,col:1},{row:2,col:2}]),B.placeShip(N,[{row:4,col:0},{row:4,col:1}])},player1:x,player2:k,gameboard1:w,gameboard2:B});function P(n){var e=document.getElementById("message-container");e.textContent="You shot and...it's";var t,r=(t=n.target,[parseInt(t.getAttribute("data-row")),parseInt(t.getAttribute("data-col"))]),o=Z.player1.takeTurn(r).result;R("gameboard2-container",r,o),setTimeout((function(){e.textContent+=o?" hit!":" miss!"}),2e3),Z.gameboard2.allShipsSunk()?U("Player 1"):setTimeout(Y,3e3)}function Y(){var n=document.getElementById("message-container");n.textContent="Your enemy is aiming...";var e=Z.player2.takeTurn(),t=e.result;R("gameboard1-container",e.attack,t),setTimeout((function(){n.textContent=t?"Enemy fire a shot and it's a hit!":"Enemy fire a shot and it's a miss!"}),2e3),Z.gameboard1.allShipsSunk()&&U("Player 2")}function R(n,e,t){var r=document.getElementById(n).querySelector('[data-row="'.concat(e[0],'"][data-col="').concat(e[1],'"]'));console.log("called"),t?r.classList.add("hit"):r.classList.add("miss"),r.classList.add("disabled"),r.removeEventListener("click",P)}function U(n){var e;e=n,document.getElementById("message-container").textContent=e}Z.startGame(),function(n){var e=document.getElementById("gameboard1-container"),t=document.getElementById("gameboard2-container");e.innerHTML="",t.innerHTML="",C(n.gameboard1,e),C(n.gameboard2,t,!0)}(Z),document.getElementById("gameboard2-container").addEventListener("click",P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,